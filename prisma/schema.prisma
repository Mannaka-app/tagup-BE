// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int       @id @default(autoincrement())
  email         String    @default("example@email.com")
  password      String?
  sub           String?   @unique
  nickname      String?
  authProvider  String
  profileUrl    String?
  gender        Gender?
  team          Int       @default(0)
  createdAt     DateTime  @default(now())
  teamSeletedAt DateTime?
  winningRate   Int?
  level         Int       @default(0)
  active        Boolean   @default(true)

  teams      Teams      @relation(fields: [team], references: [id])
  userlevels UserLevels @relation(fields: [level], references: [id])

  feedLikes     FeedLike[]
  boardThumbs   BoardThumb[]
  Feeds         Feeds[]
  FeedComments  FeedComments[]
  Board         Board[]
  BoardComments BoardComments[]
}

enum Gender {
  MALE
  FEMALE
}

model UserLevels {
  id    Int     @id @default(autoincrement())
  level String
  Users Users[]
}

model Teams {
  id    Int     @id @default(autoincrement())
  name  String
  color String?
  emoji String?

  homeGames GameSchedule[] @relation("HomeTeam")
  awayGames GameSchedule[] @relation("AwayTeam")
  Users     Users[]
  Stadium   Stadium[]
}

model Stadium {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  homeTeam Int

  teams Teams @relation(fields: [homeTeam], references: [id])

  GameSchedule GameSchedule[]
}

model GameSchedule {
  id          Int        @id @default(autoincrement())
  home        Int
  away        Int
  stadium     Int
  date        DateTime   @default(now())
  score       String
  win         Int
  status      GameStatus @default(SCHEDULED)
  homeTeam    Teams      @relation("HomeTeam", fields: [home], references: [id])
  awayTeam    Teams      @relation("AwayTeam", fields: [away], references: [id])
  stadiumInfo Stadium    @relation(fields: [stadium], references: [id])
}

enum GameStatus {
  SCHEDULED
  ONGOING
  FINISHED
  CANCELLED
}

model Feeds {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String
  content   String
  createdAt DateTime @default(now())

  likes    FeedLike[]
  users    Users      @relation(fields: [userId], references: [id])
  FeedTags FeedTags[]
}

model Tags {
  id       Int        @id @default(autoincrement())
  name     String
  FeedTags FeedTags[]
}

model FeedTags {
  id     Int @id @default(autoincrement())
  feedId Int
  tagId  Int

  tags  Tags  @relation(fields: [tagId], references: [id])
  feeds Feeds @relation(fields: [feedId], references: [id])
}

model FeedComments {
  id        Int      @id @default(autoincrement())
  feedId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  users Users @relation(fields: [userId], references: [id])
}

model Board {
  id        Int      @id @default(autoincrement())
  userId    Int
  team      Int
  title     String
  content   String
  createdAt DateTime @default(now())

  thumbs BoardThumb[]
  users  Users        @relation(fields: [userId], references: [id])
}

model BoardComments {
  id        Int      @id @default(autoincrement())
  boardId   Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  users Users @relation(fields: [userId], references: [id])
}

model FeedLike {
  userId Int
  feedId Int

  users Users @relation(fields: [userId], references: [id])
  feeds Feeds @relation(fields: [feedId], references: [id])

  @@id([userId, feedId])
}

model BoardThumb {
  userId  Int
  boardId Int

  users Users @relation(fields: [userId], references: [id])
  board Board @relation(fields: [boardId], references: [id])

  @@id([userId, boardId])
}
